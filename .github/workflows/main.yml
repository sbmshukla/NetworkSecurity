name: CI/CD Pipeline # Name of the workflow shown in GitHub Actions UI

on:
  push:
    branches:
      - main # Trigger workflow only on pushes to the main branch
    paths-ignore:
      - "README.md" # Skip workflow if only README.md is changed

jobs:
  integration:
    name: Continuous Integration # First job: basic CI checks
    runs-on: ubuntu-latest # Use latest Ubuntu runner

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3 # Pulls your repo code into the runner

      - name: Lint Code
        run: echo "Linting Repository" # Placeholder for linting (e.g., flake8)

      - name: Run Unit Tests
        run: echo "Running Unit Tests" # Placeholder for tests (e.g., pytest)

  build-and-push-ecr-image:
    name: Continuous Delivery # Second job: builds and pushes Docker image
    runs-on: ubuntu-latest
    needs: integration # Waits for CI job to complete before running

    env:
      IMAGE_TAG: latest # Tag for the Docker image
      AWS_REGION: ${{ secrets.AWS_REGION }} # AWS region from GitHub secrets
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }} # ECR repo name from secrets

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3 # Pulls your repo code again for this job

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip  # Installs CLI tools (optional)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2 # Authenticates with AWS
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # From GitHub secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1 # Logs in to ECR and sets registry output

      - name: Build, Tag, and Push Docker Image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # Registry URL from login step
        run: |
          # Build Docker image with tag
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

          # Tag image explicitly (optional but safe)
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Push image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-ec2:
    name: Continuous Deployment
    runs-on: self-hosted
    needs: build-and-push-ecr-image  # Waits for Docker image to be pushed

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}} 
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Login To Amazone ECR
        id: login-user
        uses: aws-actions/amazon-ecr-login@v1


      - name: Pull Latest Image
        run: |
          docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{secrets.ECR_REPOSITORY_NAME}}:latest

      - name: Run Docker Container
        run: |
          docker stop networksecurity || true && docker rm networksecurity || true
          docker run -d -p 8080:8080 --ipc="host" --name=networksecurity -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
      - name: Clean Previous Images and Containers
        run: |
          docker system prune -f

